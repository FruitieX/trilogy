import Knex from 'knex'
import type { $QueryBuilder } from 'knex'

declare module 'trilogy' {
  declare type Data = {
    [key: string]: any
  };
  
  declare type Criteria = Data | [string, any] | [string, string, any];
  declare module.exports: typeof Trilogy
  
  declare class Trilogy {
    constructor (
      path: string,
      options: {
        client?: string,
        dir?: string,
        verbose?: () => void
      }
    ): void;
  
    models: string[];
    knex: Knex;

    model (
      name: string,
      schema: { [key: string]: any },
      options?: {
        timestamps?: boolean,
        primary?: string[],
        unique?: string[]
      }
    ): Promise<Model>;
  
    hasModel (name: string): Promise<boolean>;
    dropModel (name: string): Promise<void>;
    raw (query: $QueryBuilder, needResponse?: boolean): Promise<any>;
    close (): Promise<void>;
  
    create (
      name: string,
      object: Data,
      options?: {}
    ): Promise<Data>;
  
    find (
      name: string,
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        limit?: number,
        skip?: number
      }
    ): Promise<Array<Data | any>>;
  
    find (
      name: string,
      column: string,
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        limit?: number,
        skip?: number
      }
    ): Promise<Array<Data | any>>;
  
    findOne (
      name: string,
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        skip?: number
      }
    ): Promise<Data | any>;
  
    findOne (
      name: string,
      column: string,
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        skip?: number
      }
    ): Promise<Data | any>;
  
    findOrCreate (
      name: string,
      criteria?: Criteria,
      creation?: Data,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        skip?: number
      }
    ): Promise<Data>;
  
    update (
      name: string,
      data: Data,
      options?: {}
    ): Promise<number>;
  
    update (
      name: string,
      critiera: Criteria,
      data: Data,
      options?: {}
    ): Promise<number>;
  
    updateOrCreate (
      name: string,
      criteria?: Criteria,
      data?: Data,
      options?: {}
    ): Promise<number>;
  
    get<T> (
      name: string,
      column: string,
      criteria?: Criteria,
      defaultValue?: T
    ):Promise<T>;
  
    set<T> (
      name: string,
      column: string,
      criteria?: Criteria,
      value?: T
    ): Promise<number>;
  
    incr (
      name: string,
      column: string,
      criteria?: Criteria,
      amount?: number
    ): Promise<number>;
  
    decr (
      name: string,
      column: string,
      criteria?: Criteria,
      amount?: number
    ): Promise<number>;
  
    remove (
      name: string,
      criteria?: Criteria
    ): Promise<number>;
  
    clear (
      name: string
    ): Promise<number>;
  
    count (
      name: string,
      column?: string,
      criteria?: Criteria,
      options?: {
        distinct?: boolean,
        group?: string
      }
    ): Promise<number>;
  
    min(
      name: string,
      column: string,
      criteria?: Criteria,
      options?: {
        group?: string
      }
    ): Promise<number>;
  
    max(
      name: string,
      column: string,
      criteria?: Criteria,
      options?: {
        group?: string
      }
    ): Promise<number>;
  }

  declare class Model {
    create (
      object: Data,
      options?: {}
    ): Promise<Data>;
  
    find (
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        limit?: number,
        skip?: number
      }
    ): Promise<Array< Data | any>>;
  
    find (
      column: string,
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        limit?: number,
        skip?: number
      }
    ): Promise<Array<Data | any>>;
  
    findOne (
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        skip?: number
      }
    ): Promise<Data | any>;
  
    findOne (
      column: string,
      criteria?: Criteria,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        skip?: number
      }
    ): Promise<Data | any>;
  
    findOrCreate (
      criteria?: Criteria,
      creation?: Data,
      options?: {
        random?: boolean,
        order?: string | [string, string],
        skip?: number
      }
    ): Promise<Data>;
  
    update (
      data: Data,
      options?: {}
    ): Promise<number>;
  
    update (
      critiera: Criteria,
      data: Data,
      options?: {}
    ): Promise<number>;
  
    updateOrCreate (
      criteria?: Criteria,
      data?: Data,
      options?: {}
    ): Promise<number>;
  
    get<T> (
      column: string,
      criteria?: Criteria,
      defaultValue?: T
    ):Promise<T>;
  
    set<T> (
      column: string,
      criteria?: Criteria,
      value?: T
    ): Promise<number>;
  
    incr (
      column: string,
      criteria?: Criteria,
      amount?: number
    ): Promise<number>;
  
    decr (
      column: string,
      criteria?: Criteria,
      amount?: number
    ): Promise<number>;
  
    remove (
      criteria?: Criteria
    ): Promise<number>;
  
    clear (): Promise<number>;
  
    count (
      column?: string,
      criteria?: Criteria,
      options?: {
        distinct?: boolean,
        group?: string
      }
    ): Promise<number>;
  
    min(
      column: string,
      criteria?: Criteria,
      options?: {
        group?: string
      }
    ): Promise<number>;
  
    max(
      column: string,
      criteria?: Criteria,
      options?: {
        group?: string
      }
    ): Promise<number>;
  }
}
